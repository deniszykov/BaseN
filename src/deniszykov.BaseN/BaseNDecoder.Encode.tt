<#@ import namespace="System.Collections.Generic" #>
<#
	var outputSpanTypes = new[] { "byte", "char" };
	var inputOutputBufferTypes = new[] { new[] { "byte[]", "byte[]" }, new[] { "byte[]", "char[]" }, new[] { "byte*", "byte*" }, new[] { "byte*", "char*" } };
	var baseAlphabetSizes = new[] {16, 32, 64};
	var inputBlockSizes = new[] {1, 5, 3};
	var outputBlockSizes = new[] {2, 8, 4};
	var encodingBits = new[] {4, 5, 6};
	var pointerTypeReplacement = new Dictionary<string, string> {
		{ "byte*", "ByteSafePtr" },
		{ "char*", "CharSafePtr" },
	};

#>
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

using System;

namespace deniszykov.BaseN
{
	using CharSafePtr = UIntPtr;
	using ByteSafePtr = IntPtr;

    partial class BaseNDecoder
    {
<#
	for (var i = 0; i < baseAlphabetSizes.Length; i++)
	{
		var baseAlphabetSize = baseAlphabetSizes[i];
		var inputBlockSize = inputBlockSizes[i];
		var outputBlockSize = outputBlockSizes[i];
		var encodingBit = encodingBits[i];

		for (var t = 0; t < outputSpanTypes.Length; t++)
		{
			var outputType = outputSpanTypes[t];
#>
#if NETCOREAPP
		private unsafe void EncodeBase<#= baseAlphabetSize #>(ReadOnlySpan<byte> input, Span<<#= outputType #>> output, bool flush, out int inputUsed, out int outputUsed, out bool completed)
		{
			if (input.IsEmpty || output.IsEmpty)
			{
				inputUsed = outputUsed = 0;
				completed = true;
				return;
			}

			// #1: preparing
			const int INPUT_BLOCK_SIZE = <#= inputBlockSize #>;
			const int OUTPUT_BLOCK_SIZE = <#= outputBlockSize #>;
			const int ENCODING_BITS = <#= encodingBit #>;
			const ulong ENCODING_MASK = <#= baseAlphabetSize - 1 #>;

			var alphabetChars = this.Alphabet.Alphabet ?? throw new InvalidOperationException();

			fixed (char* alphabetPtr = this.Alphabet.Alphabet)
			fixed (<#= outputType #>* outputBytes = &System.Runtime.InteropServices.MemoryMarshal.GetReference(output))
			fixed (byte* inputBytes = &System.Runtime.InteropServices.MemoryMarshal.GetReference(input))
			{
				var inputPtr = inputBytes;
				var outputPtr = outputBytes;

				// #2: encoding whole blocks

				var wholeBlocksToProcess = Math.Min(input.Length / INPUT_BLOCK_SIZE, output.Length / OUTPUT_BLOCK_SIZE);

				inputUsed = INPUT_BLOCK_SIZE * wholeBlocksToProcess;
				outputUsed = OUTPUT_BLOCK_SIZE * wholeBlocksToProcess;

				while (wholeBlocksToProcess-- > 0)
				{
					// fill input
					var inputBlock =
<#
	        for (var b = 0; b < inputBlockSize; b++)
            {
#>
						((ulong)inputPtr[<#= b #>] << (8 * <#= inputBlockSize - 1 - b #>)) <#= b != inputBlockSize - 1 ? "|" : ";" #>
<#
            }

#>

					// encode input
<#
	        for (var b = 0; b < outputBlockSize; b++)
            {
#>
					outputPtr[<#= outputBlockSize - 1 - b #>] = (<#= outputType #>)(alphabetPtr[(int)((inputBlock >> ENCODING_BITS * <#= b #>) & ENCODING_MASK)]);
<#
            }

#>

					inputPtr += <#= inputBlockSize #>;
					outputPtr += <#= outputBlockSize #>;
				}

				input = input.Slice(inputUsed);
				output = output.Slice(outputUsed);
			}

			// #3: encoding any final block (partial with padding)

			this.EncodeAny(input, output, flush, out var finalInputUsed, out var finalOutputUsed, out completed);

			inputUsed += finalInputUsed;
			outputUsed += finalOutputUsed;
		}
#endif
<#
		}
#>

<#
		for (var t = 0; t < inputOutputBufferTypes.Length; t++)
		{
			var inputType = inputOutputBufferTypes[t][0];
			var outputType = inputOutputBufferTypes[t][1];
			var isPointerType = inputType.EndsWith("*");
			var outputElementType = outputType.Trim(new[] {'*', '[', ']'});
#>
#if !NETCOREAPP
		private <#= isPointerType ? "unsafe " : "" #>void EncodeBase<#= baseAlphabetSize #>(<#= inputType #> input, int inputOffset, int inputCount, <#= outputType #> output, int outputOffset, int outputCount, bool flush, out int inputUsed, out int outputUsed, out bool completed)
		{
			if (inputCount == 0 || outputCount == 0)
			{
				inputUsed = outputUsed = 0;
				completed = true;
				return;
			}

			// #1: preparing
			const int INPUT_BLOCK_SIZE = <#= inputBlockSize #>;
			const int OUTPUT_BLOCK_SIZE = <#= outputBlockSize #>;
			const int ENCODING_BITS = <#= encodingBit #>;
			const ulong ENCODING_MASK = <#= baseAlphabetSize - 1 #>;

			var alphabetChars = this.Alphabet.Alphabet ?? throw new InvalidOperationException();

			// #2: encoding whole blocks

			var wholeBlocksToProcess = Math.Min(inputCount / INPUT_BLOCK_SIZE, outputCount / OUTPUT_BLOCK_SIZE);

			inputUsed = INPUT_BLOCK_SIZE * wholeBlocksToProcess;
			outputUsed = OUTPUT_BLOCK_SIZE * wholeBlocksToProcess;

			while (wholeBlocksToProcess-- > 0)
			{
				// fill input
				var inputBlock =
<#
	        for (var b = 0; b < inputBlockSize; b++)
            {
#>
					((ulong)input[inputOffset + <#= b #>] << (8 * <#= inputBlockSize - 1 - b #>)) <#= b != inputBlockSize - 1 ? "|" : ";" #>
<#
            }

#>

				// encode input
<#
	        for (var b = 0; b < outputBlockSize; b++)
            {
#>
				output[outputOffset + <#= outputBlockSize - 1 - b #>] = (<#= outputElementType #>)(alphabetChars[(int)((inputBlock >> ENCODING_BITS * <#= b #>) & ENCODING_MASK)]);
<#
            }

#>

				inputOffset += <#= inputBlockSize #>;
				outputOffset += <#= outputBlockSize #>;
			}

			// #3: encoding any final block (partial with padding)

			inputCount -= inputUsed;
			outputCount -= outputUsed;

<#
	        var inputSafeTypeCast = isPointerType ? "(" + pointerTypeReplacement[inputType] + ") ": "";
	        var outputSafeTypeCast = isPointerType ? "(" + pointerTypeReplacement[outputType] + ") " : "";
#>

			this.EncodeAny(<#= inputSafeTypeCast #>input, inputOffset, inputCount, <#= outputSafeTypeCast #>output, outputOffset, outputCount, flush, out var finalInputUsed, out var finalOutputUsed, out completed);

			inputUsed += finalInputUsed;
			outputUsed += finalOutputUsed;
		}
#endif
<#
		}
	}

#>
    }
}
