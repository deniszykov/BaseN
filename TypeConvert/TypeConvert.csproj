<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<OutputType>Library</OutputType>
	</PropertyGroup>
	<PropertyGroup>
		<TargetFrameworks>net35;net45;netstandard1.3;netstandard2.0;netcoreapp2.0;netcoreapp2.1</TargetFrameworks>
		<Authors>Denis Zykov</Authors>
		<Version>2.1.5</Version>
		<PackageId>TypeConvert</PackageId>
		<Product>TypeConvert</Product>
		<Description>Utility class for conversions between .NET types.</Description>
		<Company />
		<SignAssembly>True</SignAssembly>
		<AssemblyOriginatorKeyFile>sign.snk</AssemblyOriginatorKeyFile>
		<PublicSign Condition=" '$(OS)' != 'Windows_NT' ">true</PublicSign>
		<AllowUnsafeBlocks>True</AllowUnsafeBlocks>
		<ApplicationIcon />
		<OutputTypeEx>library</OutputTypeEx>
		<StartupObject />
		<AssemblyName>TypeConvert</AssemblyName>
		<DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
		<PackageReleaseNotes># 2.1.5
- added case-insensitive EnumHelper.Parse overloads
- fixed: Uri -&gt; string conversion should use Uri.Original string instead of Uri.ToString()
- fixed: HexConvert.ToString(buffer, offset, count) dont respect count parameter
- fixed: HexConvert.ToBytes(hexBuffer, offset, count) dont respect count parameter
- fixed: `Unable to cast object of type 'System.Linq.EmptyPartition1[System.TypeConvert+ConvertMethodInfo]' to type 'ConvertMethodInfo[]'` due breaking change in .NET 3.0


# 2.1.4
- added TypeConvert.RegisterCustomConversion method that allow override conversion operation between selected types.
- fixed Uri conversion. Relative url is now supported.

# 2.1.3
- fixed conversion methods (ToXXX, FromXXX) on value types cause delegate binding exception
	
# 2.1.2
- added netstandard2.0 and netcoreapp2.1 target platform
- fixed error with netcoreapp2.1 ByRefLike types (they are not supported in conversion operations)
- fixed error with string-&gt;enum conversion (new tests are added)

# 2.1.0
- added conversion via constructor support
- added System.ComponentModel.TypeConverter support for netstandard2.0 platform
 

# 2.0.0
- added fast conversion for numbers (byte, int, float...)
- added priority of conversion methods (formattable methods, implicit operators, explicit operators, Parse/Create/From/To methods, System.Convert methods)
- optimized performance by cutting redundant initialization of internal classes
- added documentation

# breaking changes
- non-generic Convert and TryConvert signature has been changed. Parameter "fromType" has been removed. Order of parameters has been changed.
- new priority of conversion methods could lead to conversion result that differs from v1.2.0.
- TypeConvert.ToString now returns String.Empty instead of null when null value is passed.
- changed signature of HexConvert's methods for better semantic

# 1.2.0
- fixed error in type activator parameters binding (now more specific types binds successfully)
- added new EnumHelper enum's properties DefaultValue, MinValue, MaxValue, Names, Values, UnderlyingType
- added forth argument to TypeActivator.CreateInstance methods
- TypeActivator signature fix to match .NET 4.5 and .NET Standard 1.3/2.0 build targets

# 1.1.0
 - added EnumHelper for enum conversion between number and object form
 - added '.NET Standard 1.3' platform target

# 1.0.0.1
- fixed object &lt;-&gt; nullable value, enum &lt;-&gt; nullable conversions
		</PackageReleaseNotes>
		<PackageProjectUrl>https://github.com/deniszykov/typeconvert</PackageProjectUrl>
		<PackageLicenseUrl>https://raw.githubusercontent.com/deniszykov/typeconvert/master/LICENSE</PackageLicenseUrl>
		<Copyright>(c) Denis Zykov 2020</Copyright>
		<RepositoryUrl>https://github.com/deniszykov/typeconvert</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<PackageTags>hex convert construct enum tools units</PackageTags>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<Optimize>False</Optimize>
		<DefineConstants>RELEASE</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<DefineConstants>DEBUG;TRACE</DefineConstants>
	</PropertyGroup>
	<ItemGroup>
		<None Include="NativeConversions.cs">
		  <DesignTime>True</DesignTime>
		  <AutoGen>True</AutoGen>
		  <DependentUpon>NativeConversions.tt</DependentUpon>
		</None>
		<None Include="sign.snk" />
	</ItemGroup>
	<ItemGroup>
	  <None Update="NativeConversions.tt">
		<Generator>TextTemplatingFileGenerator</Generator>
		<LastGenOutput>NativeConversions.cs</LastGenOutput>
	  </None>
	</ItemGroup>
	<ItemGroup>
	  <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
	</ItemGroup>
	<ItemGroup>
	  <Compile Update="NativeConversions.cs">
		<DesignTime>True</DesignTime>
		<AutoGen>True</AutoGen>
		<DependentUpon>NativeConversions.tt</DependentUpon>
	  </Compile>
	</ItemGroup>
	<PropertyGroup>
		<DefineConstants>$(DefineConstants);ENUM_HELPER;NATIVE_CONVERSIONS;TYPE_ACTIVATOR</DefineConstants>
		<LangVersion>4</LangVersion>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard1.3'">
		<DefineConstants>$(DefineConstants);NETSTANDARD;NETSTANDARD13;NO_TYPE_REFS;</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp2.0' or '$(TargetFramework)' == 'netstandard2.0'">
		<DefineConstants>$(DefineConstants);NETSTANDARD;NETSTANDARD20;NO_TYPE_REFS;</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(TargetFramework)' == 'net45' ">
		<DefineConstants>$(DefineConstants);NET45</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(TargetFramework)' == 'net35' ">
		<DefineConstants>$(DefineConstants);NET35</DefineConstants>
	</PropertyGroup>
</Project>